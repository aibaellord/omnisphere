# ðŸŒŒ OMNISPHERE DOCKER COMPOSE ðŸŒŒ
# Local development environment setup

version: '3.8'

services:
  # Main Application
  omnisphere:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: omnisphere-app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker if needed
    environment:
      - APP_ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://omnisphere:omnisphere123@postgres:5432/omnisphere_db
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongodb:27017/omnisphere_docs
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - omnisphere-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: omnisphere-postgres
    environment:
      POSTGRES_DB: omnisphere_db
      POSTGRES_USER: omnisphere
      POSTGRES_PASSWORD: omnisphere123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - omnisphere-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnisphere -d omnisphere_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: omnisphere-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - omnisphere-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Document Database
  mongodb:
    image: mongo:7
    container_name: omnisphere-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: omnisphere
      MONGO_INITDB_ROOT_PASSWORD: omnisphere123
      MONGO_INITDB_DATABASE: omnisphere_docs
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - omnisphere-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (Background Tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: omnisphere-celery-worker
    command: celery -A core.tasks worker --loglevel=info
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      - APP_ENVIRONMENT=development
      - DATABASE_URL=postgresql://omnisphere:omnisphere123@postgres:5432/omnisphere_db
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongodb:27017/omnisphere_docs
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: omnisphere-celery-beat
    command: celery -A core.tasks beat --loglevel=info
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      - APP_ENVIRONMENT=development
      - DATABASE_URL=postgresql://omnisphere:omnisphere123@postgres:5432/omnisphere_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: omnisphere-flower
    command: celery -A core.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Nginx (Reverse Proxy & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: omnisphere-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - omnisphere
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: omnisphere-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: omnisphere-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Selenium Grid Hub (for web automation)
  selenium-hub:
    image: selenium/hub:4
    container_name: omnisphere-selenium-hub
    ports:
      - "4444:4444"
    networks:
      - omnisphere-network
    restart: unless-stopped

  # Selenium Chrome Node
  selenium-chrome:
    image: selenium/node-chrome:4
    container_name: omnisphere-selenium-chrome
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - selenium-hub
    networks:
      - omnisphere-network
    restart: unless-stopped

# Networks
networks:
  omnisphere-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
